// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(CLIENT)
  createdAt DateTime  @default(now()) @map("create_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  accounts   Account[]
  UserBudget UserBudget[]

  @@map("users")
}

model Budget {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("create_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  categories   Category[]
  transactions Transaction[]
  accounts     Account[]

  UserBudget UserBudget[]

  @@map("budgets")
}

model UserBudget {
  userId   String
  budgetId String

  user   User   @relation(fields: [userId], references: [id])
  budget Budget @relation(fields: [budgetId], references: [id])

  @@id([userId, budgetId]) // Composite primary key for many-to-many relationship
  @@map("user_budgets")
}

model Account {
  id           String        @id @default(uuid())
  ownerId      String        @map("owner_id")
  name         String
  balance      Int         @default(0)
  createdAt    DateTime      @default(now()) @map("create_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  budgetId     String
  transactions Transaction[]

  Budget Budget @relation(fields: [budgetId], references: [id])
  owner  User   @relation(fields: [ownerId], references: [id])

  @@map("accounts")
}

enum TypeTransaction {
  EXPENSES
  INCOMES
}

model Transaction {
  id            String    @id @default(uuid())
  description   String
  createdAt     DateTime  @default(now()) @map("create_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  amount        Int
  budgetId      String
  categoryId    String
  subCategoryId String?
  date          DateTime
  accountId     String

  type TypeTransaction

  Budget   Budget   @relation(fields: [budgetId], references: [id])
  Category Category @relation(fields: [categoryId], references: [id])
  Account  Account  @relation(fields: [accountId], references: [id])

  @@map("transactions")
}

model Category {
  id        String          @id @default(uuid())
  name      String
  createdAt DateTime        @default(now()) @map("create_at")
  updatedAt DateTime?       @updatedAt @map("updated_at")
  budgetId  String
  type      TypeTransaction @default(EXPENSES)

  transactions  Transaction[]
  subcategories SubCategory[]

  Budget Budget @relation(fields: [budgetId], references: [id])

  @@map("categories")
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  createdAt  DateTime  @default(now()) @map("create_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  categoryId String

  Category Category @relation(fields: [categoryId], references: [id])

  @@map("subcategories")
}
